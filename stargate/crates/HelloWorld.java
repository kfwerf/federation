class HelloWorld {
    // This declares that the static `hello` method will be provided
    // a native library.
    private static native String hello(String input);

    static {
        // This actually loads the shared object that we'll be creating.
        // The actual location of the .so or .dll may differ based on your
        // platform.
        System.loadLibrary("apollo_query_planner");
    }

    // The rest is just regular ol' Java!
    public static void main(String[] args) {
        String output = HelloWorld.hello(
            "schema\n"
                + "@graph(name: \"accounts\", url: \"https://accounts.api.com\")\n"
                + "@graph(name: \"books\", url: \"https://books.api.com\")\n"
                + "@graph(name: \"documents\", url: \"https://documents.api.com\")\n"
                + "@graph(name: \"inventory\", url: \"https://inventory.api.com\")\n"
                + "@graph(name: \"product\", url: \"https://product.api.com\")\n"
                + "@graph(name: \"reviews\", url: \"https://reviews.api.com\")\n"
                + "@composedGraph(version: 1)\n"
                + "{\n"
                + "    query: Query\n"
                + "    mutation: Mutation\n"
                + "}\n"
                + "\n"
                + "union AccountType = PasswordAccount | SMSAccount\n"
                + "\n"
                + "type Amazon {\n"
                + "    referrer: String\n"
                + "}\n"
                + "\n"
                + "union Body = Image | Text\n"
                + "\n"
                + "type Book implements Product\n"
                + "@owner(graph: \"books\")\n"
                + "@key(fields: \"{isbn}\", graph: \"books\")\n"
                + "@key(fields: \"{isbn}\", graph: \"inventory\")\n"
                + "@key(fields: \"{isbn}\", graph: \"product\")\n"
                + "@key(fields: \"{isbn}\", graph: \"reviews\")\n"
                + "{\n"
                + "    isbn: String!\n"
                + "    title: String\n"
                + "    year: Int\n"
                + "    similarBooks: [Book]!\n"
                + "    metadata: [MetadataOrError]\n"
                + "    inStock: Boolean @resolve(graph: \"inventory\")\n"
                + "    isCheckedOut: Boolean @resolve(graph: \"inventory\")\n"
                + "    upc: String! @resolve(graph: \"product\")\n"
                + "    sku: String! @resolve(graph: \"product\")\n"
                + "    name(delimeter: String = \" \"): String @resolve(graph: \"product\") @requires(fields: \"{title year}\")\n"
                + "    price: String @resolve(graph: \"product\")\n"
                + "    details: ProductDetailsBook @resolve(graph: \"product\")\n"
                + "    reviews: [Review] @resolve(graph: \"reviews\")\n"
                + "    relatedReviews: [Review!]! @resolve(graph: \"reviews\") @requires(fields: \"{similarBooks { isbn }}\")\n"
                + "}\n"
                + "\n"
                + "union Brand = Ikea | Amazon\n"
                + "\n"
                + "type Car implements Vehicle\n"
                + "@owner(graph: \"product\")\n"
                + "@key(fields: \"{id}\", graph: \"product\")\n"
                + "@key(fields: \"{id}\", graph: \"reviews\")\n"
                + "{\n"
                + "    id: String!\n"
                + "    description: String\n"
                + "    price: String\n"
                + "    retailPrice: String @resolve(graph: \"reviews\") @requires(fields: \"{price}\")\n"
                + "    thing: Thing\n"
                + "}\n"
                + "\n"
                + "type Error {\n"
                + "    code: Int\n"
                + "    message: String\n"
                + "}\n"
                + "\n"
                + "type Furniture implements Product\n"
                + "@owner(graph: \"product\")\n"
                + "@key(fields: \"{upc}\", graph: \"product\")\n"
                + "@key(fields: \"{sku}\", graph: \"product\")\n"
                + "@key(fields: \"{sku}\", graph: \"inventory\")\n"
                + "@key(fields: \"{upc}\", graph: \"reviews\")\n"
                + "{\n"
                + "    upc: String!\n"
                + "    sku: String!\n"
                + "    name: String\n"
                + "    price: String\n"
                + "    brand: Brand\n"
                + "    metadata: [MetadataOrError]\n"
                + "    details: ProductDetailsFurniture\n"
                + "    inStock: Boolean @resolve(graph: \"inventory\")\n"
                + "    isHeavy: Boolean @resolve(graph: \"inventory\")\n"
                + "    reviews: [Review] @resolve(graph: \"reviews\")\n"
                + "}\n"
                + "\n"
                + "type Ikea {\n"
                + "    asile: Int\n"
                + "}\n"
                + "\n"
                + "type Image {\n"
                + "    name: String!\n"
                + "    attributes: ImageAttributes!\n"
                + "}\n"
                + "\n"
                + "type ImageAttributes {\n"
                + "    url: String!\n"
                + "}\n"
                + "\n"
                + "type KeyValue {\n"
                + "    key: String!\n"
                + "    value: String!\n"
                + "}\n"
                + "\n"
                + "type Library\n"
                + "@owner(graph: \"books\")\n"
                + "@key(fields: \"{id}\", graph: \"books\")\n"
                + "@key(fields: \"{id}\", graph: \"accounts\")\n"
                + "{\n"
                + "    id: ID!\n"
                + "    name: String\n"
                + "    userAccount(id: ID! = 1): User @resolve(graph: \"accounts\") @requires(fields: \"{name}\")\n"
                + "}\n"
                + "\n"
                + "union MetadataOrError = KeyValue | Error\n"
                + "\n"
                + "type Mutation {\n"
                + "    login(username: String!, password: String!): User @resolve(graph: \"accounts\")\n"
                + "    reviewProduct(upc: String!, body: String!): Product @resolve(graph: \"reviews\")\n"
                + "    updateReview(review: UpdateReviewInput!): Review @resolve(graph: \"reviews\")\n"
                + "    deleteReview(id: ID!): Boolean @resolve(graph: \"reviews\")\n"
                + "}\n"
                + "\n"
                + "type Name {\n"
                + "    first: String\n"
                + "    last: String\n"
                + "}\n"
                + "\n"
                + "type PasswordAccount\n"
                + "@owner(graph: \"accounts\")\n"
                + "@key(fields: \"{email}\", graph: \"accounts\")\n"
                + "{\n"
                + "    email: String!\n"
                + "}\n"
                + "\n"
                + "interface Product {\n"
                + "    upc: String!\n"
                + "    sku: String!\n"
                + "    name: String\n"
                + "    price: String\n"
                + "    details: ProductDetails\n"
                + "    inStock: Boolean\n"
                + "    reviews: [Review]\n"
                + "}\n"
                + "\n"
                + "interface ProductDetails {\n"
                + "    country: String\n"
                + "}\n"
                + "\n"
                + "type ProductDetailsBook implements ProductDetails {\n"
                + "    country: String\n"
                + "    pages: Int\n"
                + "}\n"
                + "\n"
                + "type ProductDetailsFurniture implements ProductDetails {\n"
                + "    country: String\n"
                + "    color: String\n"
                + "}\n"
                + "\n"
                + "type Query {\n"
                + "    user(id: ID!): User @resolve(graph: \"accounts\")\n"
                + "    me: User @resolve(graph: \"accounts\")\n"
                + "    book(isbn: String!): Book @resolve(graph: \"books\")\n"
                + "    books: [Book] @resolve(graph: \"books\")\n"
                + "    library(id: ID!): Library @resolve(graph: \"books\")\n"
                + "    body: Body! @resolve(graph: \"documents\")\n"
                + "    product(upc: String!): Product @resolve(graph: \"product\")\n"
                + "    vehicle(id: String!): Vehicle @resolve(graph: \"product\")\n"
                + "    topProducts(first: Int = 5): [Product] @resolve(graph: \"product\")\n"
                + "    topCars(first: Int = 5): [Car] @resolve(graph: \"product\")\n"
                + "    topReviews(first: Int = 5): [Review] @resolve(graph: \"reviews\")\n"
                + "}\n"
                + "\n"
                + "type Review\n"
                + "@owner(graph: \"reviews\")\n"
                + "@key(fields: \"{id}\", graph: \"reviews\")\n"
                + "{\n"
                + "    id: ID!\n"
                + "    body(format: Boolean = false): String\n"
                + "    author: User @provides(fields: \"{username}\")\n"
                + "    product: Product\n"
                + "    metadata: [MetadataOrError]\n"
                + "}\n"
                + "\n"
                + "type SMSAccount\n"
                + "@owner(graph: \"accounts\")\n"
                + "@key(fields: \"{number}\", graph: \"accounts\")\n"
                + "{\n"
                + "    number: String\n"
                + "}\n"
                + "\n"
                + "type Text {\n"
                + "    name: String!\n"
                + "    attributes: TextAttributes!\n"
                + "}\n"
                + "\n"
                + "type TextAttributes {\n"
                + "    bold: Boolean\n"
                + "    text: String\n"
                + "}\n"
                + "\n"
                + "union Thing = Car | Ikea\n"
                + "\n"
                + "input UpdateReviewInput {\n"
                + "    id: ID!\n"
                + "    body: String\n"
                + "}\n"
                + "\n"
                + "type User\n"
                + "@owner(graph: \"accounts\")\n"
                + "@key(fields: \"{id}\", graph: \"accounts\")\n"
                + "@key(fields: \"{username name { first last }}\", graph: \"accounts\")\n"
                + "@key(fields: \"{id}\", graph: \"inventory\")\n"
                + "@key(fields: \"{id}\", graph: \"product\")\n"
                + "@key(fields: \"{id}\", graph: \"reviews\")\n"
                + "{\n"
                + "    id: ID!\n"
                + "    name: Name\n"
                + "    username: String\n"
                + "    birthDate(locale: String): String\n"
                + "    account: AccountType\n"
                + "    metadata: [UserMetadata]\n"
                + "    goodDescription: Boolean @resolve(graph: \"inventory\") @requires(fields: \"{metadata { description }}\")\n"
                + "    vehicle: Vehicle @resolve(graph: \"product\")\n"
                + "    thing: Thing @resolve(graph: \"product\")\n"
                + "    reviews: [Review] @resolve(graph: \"reviews\")\n"
                + "    numberOfReviews: Int! @resolve(graph: \"reviews\")\n"
                + "    goodAddress: Boolean @resolve(graph: \"reviews\") @requires(fields: \"{metadata { address }}\")\n"
                + "}\n"
                + "\n"
                + "type UserMetadata {\n"
                + "    name: String\n"
                + "    address: String\n"
                + "    description: String\n"
                + "}\n"
                + "\n"
                + "type Van implements Vehicle\n"
                + "@owner(graph: \"product\")\n"
                + "@key(fields: \"{id}\", graph: \"product\")\n"
                + "@key(fields: \"{id}\", graph: \"reviews\")\n"
                + "{\n"
                + "    id: String!\n"
                + "    description: String\n"
                + "    price: String\n"
                + "    retailPrice: String @resolve(graph: \"reviews\") @requires(fields: \"{price}\")\n"
                + "    thing: Thing\n"
                + "}\n"
                + "\n"
                + "interface Vehicle {\n"
                + "    id: String!\n"
                + "    description: String\n"
                + "    price: String\n"
                + "    retailPrice: String\n"
                + "    thing: Thing\n"
                + "}\n"
                + "\n"
                + "directive @composedGraph(version: Int!) on SCHEMA\n"
                + "directive @graph(name: String!, url: String!) repeatable on SCHEMA\n"
                + "directive @owner(graph: String!) on OBJECT\n"
                + "directive @key(fields: String!, graph: String!) repeatable on OBJECT\n"
                + "directive @resolve(graph: String!) on FIELD_DEFINITION\n"
                + "directive @provides(fields: String!) on FIELD_DEFINITION\n"
                + "directive @requires(fields: String!) on FIELD_DEFINITION\n"
                + "directive @stream on FIELD\n"
                + "directive @transform(from: String!) on FIELD\n"
        );
        System.out.println(output);
    }
}